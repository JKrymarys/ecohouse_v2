{"version":3,"sources":["utils/backend.ts","components/house-info/HouseInfo.tsx","utils/dummyData.ts","components/temp-graph/TempGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCurrentState","a","fetch","then","response","json","catch","e","console","log","HouseInfo","useState","currentHouseState","setCurrentHouseState","useEffect","interval","setInterval","clearInterval","className","temp","pressure","dummyTempData","dateTime","TempGraph","tempTimeseriesData","map","labels","data","Chart","type","datasets","borderWidth","borderColor","createChart","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAIaA,EAAe,uCAAG,sBAAAC,EAAA,+EAAYC,MAAM,GAAD,OAH7B,+BAG6B,yBAC3CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,QAASF,OAFN,2CAAH,qD,eCQb,SAASG,IAAa,IAAD,EACkBC,qBADlB,mBACzBC,EADyB,KACNC,EADM,KAYhC,OATAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBhB,IAAkBG,KAAKU,KACxB,KACH,OAAO,kBAAMI,cAAcF,MAC5B,IAKC,qBAAKG,UAAU,qBAAf,SAEQN,EACK,qCACG,sBAAKM,UAAU,WAAf,mBAAiCN,EAAkBO,KAAnD,OACA,sBAAKD,UAAU,WAAf,uBAAqCN,EAAkBQ,eAG3D,8C,WCjCPC,EAAgB,CAC3B,CAAEC,SAAU,sBAAuBH,KAAM,IACzC,CAAEG,SAAU,sBAAuBH,KAAM,IACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,MACzC,CAAEG,SAAU,sBAAuBH,KAAM,IACzC,CAAEG,SAAU,sBAAuBH,KAAM,OACzC,CAAEG,SAAU,sBAAuBH,KAAM,K,MCqB5B,SAASI,IACtB,IAAMC,EAAqBH,EAAcI,KAAI,SAAClB,GAAD,OAAOA,EAAEY,QAChDO,EAASL,EAAcI,KAAI,SAAClB,GAAD,OAAOA,EAAEe,YAQ1C,OANAd,QAAQC,IAAI,qBAAsBe,GAElCV,qBAAU,YAvBQ,SAACa,EAAgBD,GAC5B,IAAIE,IAAM,UAAW,CAC1BC,KAAM,OAENF,KAAM,CACJD,OAAQA,EACRI,SAAU,CACR,CACEH,KAAMA,EACNI,YAAa,EACbC,YAAa,WAcnBC,CAAYT,EAAoBE,KAC/B,CAACA,EAAQF,IAGV,qBAAKN,UAAU,aAAf,SACE,wBAAQgB,GAAG,cC9BFC,MAVf,WACE,OACE,gCACE,8CACA,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0405f342.chunk.js","sourcesContent":["\nconst apiBaseUrl = \"http://0105f1f7c72c.ngrok.io\";\n\n\nexport const getCurrentState = async () => fetch(`${apiBaseUrl}/current-house-state`)\n    .then(response => response.json())\n    .catch(e => console.log(\"Error\", e))","import React, { useEffect, useState } from \"react\";\n\nimport { getCurrentState } from 'utils/backend';\n\nimport \"./HouseInfo.scss\";\n\ninterface CurrentHouseState {\n    datetime: string;\n    pressure: number;\n    temp: number;\n}\n\nexport default function HouseInfo() {\n    const [currentHouseState, setCurrentHouseState] = useState<CurrentHouseState>();\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            getCurrentState().then(setCurrentHouseState)\n        }, 5000);\n        return () => clearInterval(interval);\n    }, []);\n\n\n\n    return (\n        <div className=\"current-house-info\">\n            {\n                currentHouseState ?\n                    (<>\n                        <div className=\"info-row\">temp: {currentHouseState.temp} </div>\n                        <div className=\"info-row\">pressure: {currentHouseState.pressure}</div>\n                    </>\n                    ) :\n                    <div> No data </div>\n            }\n        </div >\n    )\n}","export const dummyTempData = [\n  { dateTime: \"2021-05-21T09:00:50\", temp: 19 },\n  { dateTime: \"2021-05-21T10:00:50\", temp: 20 },\n  { dateTime: \"2021-05-21T11:00:50\", temp: 20.1 },\n  { dateTime: \"2021-05-21T12:00:50\", temp: 20.3 },\n  { dateTime: \"2021-05-21T13:00:50\", temp: 20.4 },\n  { dateTime: \"2021-05-21T14:00:50\", temp: 20.8 },\n  { dateTime: \"2021-05-21T15:00:50\", temp: 20.3 },\n  { dateTime: \"2021-05-21T16:00:50\", temp: 20.1 },\n  { dateTime: \"2021-05-21T17:00:50\", temp: 19.3 },\n  { dateTime: \"2021-05-21T18:00:50\", temp: 18.0 },\n  { dateTime: \"2021-05-21T19:00:50\", temp: 17.05 },\n  { dateTime: \"2021-05-21T20:00:50\", temp: 17 },\n];\n","import { useEffect } from \"react\";\n\nimport Chart from \"chart.js/auto\";\n\nimport { dummyTempData } from \"utils/dummyData\";\n\nimport \"./TempGraph.scss\";\n\n// import \"./HouseInfo.scss\";\n\n// interface CurrentHouseState {\n//   datetime: string;\n//   pressure: number;\n//   temp: number;\n// }\n\nconst createChart = (data: number[], labels: string[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          borderWidth: 1,\n          borderColor: \"red\",\n        },\n      ],\n    },\n  });\n};\n\nexport default function TempGraph() {\n  const tempTimeseriesData = dummyTempData.map((e) => e.temp);\n  const labels = dummyTempData.map((e) => e.dateTime);\n\n  console.log(\"tempTimeseriesData\", tempTimeseriesData);\n\n  useEffect(() => {\n    createChart(tempTimeseriesData, labels);\n  }, [labels, tempTimeseriesData]);\n\n  return (\n    <div className=\"temp-chart\">\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import \"./App.css\";\n\nimport HouseInfo from \"components/house-info/HouseInfo\";\nimport TempGraph from \"components/temp-graph/TempGraph\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Eco house v2</h1>\n      <HouseInfo />\n      <TempGraph />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}