{"version":3,"sources":["store/hooks.ts","store/sensorStatsSlice.ts","utils/chartUtils.ts","components/temp-pressure-graph/index.tsx","components/stats/index.tsx","utils/backend.ts","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["useAppSelector","useSelector","DATA_STATUS","loaded","loading","error","sensorStats","createSlice","name","initialState","data","status","reducers","houseDataFetch","state","houseDataLoaded","action","payload","houseDataError","actions","CHART_COLORS","TempPressureGraph","useState","chartRef","setChartRef","tempData","map","x","timestamp","y","temp","pressureData","pressure","useEffect","chart","Chart","type","datasets","borderColor","Utils","backgroundColor","label","yAxisID","options","maintainAspectRatio","interaction","mode","intersect","scales","time","tooltipFormat","title","display","text","tempY","position","pressureY","grid","drawOnChartArea","createChart","update","updateData","className","style","height","width","id","calculateMeanTemp","reduce","mean","dataEntry","length","calculateMeanPressure","filterOutData","filter","e","today","Date","toISOString","slice","Stats","lastEntry","todayEntries","includes","lastEntryDatetime","parse","toLocaleString","allTimeMeanTemp","todayMeanTemp","allTimeMeanPressure","todayMeanPressure","toFixed","getHistoricData","a","fetch","then","response","json","Items","sort","catch","console","App","currentYear","getFullYear","dispatch","useDispatch","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6974c54f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './'\n\n// Use throughout the app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { SensorData } from './types';\nimport { StateEntry } from 'utils/types'\n\n\n\nconst DATA_STATUS = {\n    loaded: {\n        loaded: true,\n        loading: false,\n        error: false\n    },\n    loading: {\n        loaded: false,\n        loading: true,\n        error: false\n    },\n    error: {\n        loaded: false,\n        loading: false,\n        error: true\n    },\n}\n\nconst initialState: SensorData = {\n    data: [],\n    status: {\n        loaded: false,\n        loading: false,\n        error: false\n    }\n}\n\nexport const sensorStats = createSlice({\n    name: 'sensorStats',\n    initialState,\n    reducers: {\n        houseDataFetch: (state) => {\n            state.status = DATA_STATUS.loading\n        },\n        houseDataLoaded: (state, action: PayloadAction<StateEntry[]>) => {\n            state.status = DATA_STATUS.loaded;\n            state.data = action.payload;\n        },\n        houseDataError: (state) => {\n            state.status = DATA_STATUS.error\n        },\n    },\n})\n\nexport const { houseDataFetch, houseDataLoaded, houseDataError } = sensorStats.actions;\n\nexport default sensorStats.reducer;","export const CHART_COLORS = {\n    red: 'rgb(255, 99, 132)',\n    redTransparent: 'rgb(255, 99, 132, 0.5)',\n    orange: 'rgb(255, 159, 64)',\n    orangeTransparent: 'rgb(255, 159, 64,0.5)',\n    yellow: 'rgb(255, 205, 86)',\n    yellowTransparent: 'rgb(255, 205, 86,0.5)',\n    green: 'rgb(75, 192, 192)',\n    greenTransparent: 'rgb(75, 192, 192,0.5)',\n    blue: 'rgb(54, 162, 235)',\n    blueTransparent: 'rgb(54, 162, 235, 0.5)',\n    purple: 'rgb(153, 102, 255)',\n    purpleTransparent: 'rgb(153, 102, 255, 0.5)',\n    grey: 'rgb(201, 203, 207)',\n    greyTransparent: 'rgb(201, 203, 207, 0.5)'\n};","import { useEffect, useState } from \"react\";\nimport { useAppSelector } from \"store/hooks\";\nimport Chart from \"chart.js/auto\";\nimport \"chartjs-adapter-moment\";\n\nimport { StateEntry } from \"utils/types\";\nimport * as Utils from \"utils/chartUtils\";\n\ninterface ChartData {\n  x: string;\n  y: number;\n}\n\nfunction updateData(\n  chart: any,\n  tempData: ChartData[],\n  pressureData: ChartData[]\n) {\n  chart.data.datasets[0].data = tempData;\n  chart.data.datasets[1].data = pressureData;\n  chart.update();\n}\n\nconst createChart = (tempData: ChartData[], pressureData: ChartData[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n    data: {\n      datasets: [\n        {\n          data: tempData,\n          borderColor: Utils.CHART_COLORS.red,\n          backgroundColor: Utils.CHART_COLORS.redTransparent,\n          label: \"Temp\",\n          yAxisID: \"tempY\",\n        },\n        {\n          data: pressureData,\n          borderColor: Utils.CHART_COLORS.blue,\n          backgroundColor: Utils.CHART_COLORS.blueTransparent,\n          label: \"Pressure\",\n          yAxisID: \"pressureY\",\n        },\n      ],\n    },\n    options: {\n      maintainAspectRatio: false,\n      interaction: {\n        mode: \"index\",\n        intersect: false,\n      },\n\n      scales: {\n        x: {\n          type: \"time\",\n          time: {\n            tooltipFormat: \"lll\",\n          },\n          title: {\n            display: true,\n            text: \"Date\",\n          },\n        },\n        tempY: {\n          type: \"linear\",\n          display: true,\n          position: \"left\",\n        },\n        pressureY: {\n          type: \"linear\",\n          display: true,\n          position: \"right\",\n          // grid line settings\n          grid: {\n            drawOnChartArea: false, // only want the grid lines for one axis to show up\n          },\n        },\n      },\n    },\n  });\n};\n\nexport default function TempPressureGraph() {\n  const { data } = useAppSelector((state) => state.sensorStats);\n\n  const [chartRef, setChartRef] = useState<any>();\n\n  const tempData = data.map(({ timestamp, temp }: StateEntry) => ({\n    x: timestamp,\n    y: temp,\n  }));\n\n  const pressureData = data.map(({ timestamp, pressure }: StateEntry) => ({\n    x: timestamp,\n    y: pressure,\n  }));\n\n  useEffect(() => {\n    const chart = createChart(tempData, pressureData);\n    setChartRef(chart);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef) return;\n\n    updateData(chartRef, tempData, pressureData);\n    chartRef.update();\n  }, [chartRef, tempData, pressureData]);\n\n  return (\n    <div\n      className=\"bg-white border-transparent rounded-lg shadow-xl p-10\"\n      style={{ position: \"relative\", height: \"60vh\", width: \"60vw\" }}\n    >\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import { useAppSelector } from \"store/hooks\";\nimport \"chartjs-adapter-moment\";\nimport { StateEntry } from \"utils/types\";\n\nfunction calculateMeanTemp(data: StateEntry[]) {\n  return (\n    data.reduce((mean: number, dataEntry: StateEntry) => {\n      mean += dataEntry.temp;\n      return mean;\n    }, 0) / data.length\n  );\n}\n\nfunction calculateMeanPressure(data: StateEntry[]) {\n  const filterOutData = data.filter((e) => e.pressure);\n  return (\n    filterOutData.reduce((mean: number, dataEntry: StateEntry) => {\n      mean += dataEntry.pressure;\n      return mean;\n    }, 0) / filterOutData.length\n  );\n}\n\nconst today = new Date().toISOString().slice(0, 10);\n\nexport default function Stats() {\n  const { data } = useAppSelector((state) => state.sensorStats);\n\n  const lastEntry = data[data.length - 1];\n  const todayEntries = data.filter((e: StateEntry) =>\n    e.timestamp.includes(today)\n  );\n\n  const lastEntryDatetime = new Date(\n    Date.parse(lastEntry?.timestamp)\n  ).toLocaleString();\n\n  const allTimeMeanTemp = calculateMeanTemp(data);\n  const todayMeanTemp = calculateMeanTemp(todayEntries);\n\n  const allTimeMeanPressure = calculateMeanPressure(data);\n  const todayMeanPressure = calculateMeanPressure(todayEntries);\n\n  return (\n    <div className=\"bg-white border-transparent rounded-lg shadow-xl p-10 h-full flex flex-col justify-between\">\n      <div>\n        <h1 className=\"text-xl font-semibold mb-6\">Stats</h1>\n        Current: {lastEntry?.temp.toFixed(2)} °C\n        <br />\n        <div className=\"mb-4\">\n          Today mean temperature: {allTimeMeanTemp.toFixed(2)} °C <br />\n          All time mean temperature: {todayMeanTemp.toFixed(2)} °C\n        </div>\n        <div className=\"mb-4\">\n          Today mean pressure: {allTimeMeanPressure.toFixed(2)} hPa <br />\n          All time mean pressure: {todayMeanPressure.toFixed(2)} hPa\n        </div>\n      </div>\n      <p className=\"text-sm text-gray-400\">Last data: {lastEntryDatetime}</p>\n    </div>\n  );\n}\n","const API_URL =\n  \"https://8o8h5nqi81.execute-api.eu-west-2.amazonaws.com/tempData\";\n\nexport const getHistoricData = async () =>\n  fetch(API_URL)\n    .then((response) => response.json())\n    .then((data) => data.Items.sort())\n    .catch(() => {\n      console.error(\"Couldn't fetch data\");\n      return [];\n    });\n","import { useEffect } from \"react\";\n\nimport { useAppDispatch, useAppSelector } from \"store/hooks\";\nimport {\n  houseDataFetch,\n  houseDataLoaded,\n  houseDataError,\n} from \"./store/sensorStatsSlice\";\n\nimport TempPressureGraph from \"components/temp-pressure-graph\";\nimport Stats from \"components/stats\";\n\nimport { getHistoricData } from \"utils/backend\";\n\nfunction App() {\n  const currentYear = new Date().getFullYear();\n  const dispatch = useAppDispatch();\n  const { status } = useAppSelector((state) => state.sensorStats);\n\n  useEffect(() => {\n    dispatch(houseDataFetch());\n\n    getHistoricData()\n      .then((data) => dispatch(houseDataLoaded(data)))\n      .catch(() => dispatch(houseDataError()));\n  }, [dispatch]);\n\n  //TODO: improve loading and error handlers\n  if (status.loading) {\n    return <div>Loading....</div>;\n  }\n\n  if (status.error) {\n    return <div>Error!</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-800 p-3 flex flex-col justify-between\">\n      <header className=\"text-2xl font-bold text-white h-12 flex justify-center\">\n        Eco house - dashboard\n      </header>\n      <main className=\"flex flex-row flex-wrap p-6 justify-between items-stretch\">\n        <div className=\"p-6\">\n          <TempPressureGraph />\n        </div>\n        <div className=\"p-6 flex-grow\">\n          <Stats />\n        </div>\n      </main>\n      <footer className=\"h-12 flex items-center justify-center w-full border-t text-white\">\n        Created with ☕ &nbsp;\n        <a className=\"hover:text-gray-400\" href=\"https://www.jkrymarys.pl/\">\n          &nbsp;jkrymarys.pl&nbsp;\n        </a>\n        ©&nbsp;{currentYear}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport sensorStats from './sensorStatsSlice'\n\nconst store = configureStore({\n    reducer: {\n        sensorStats: sensorStats\n    },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}