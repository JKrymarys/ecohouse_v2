{"version":3,"sources":["utils/backend.ts","components/temp-graph/TempGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getHistoricData","a","fetch","then","response","json","data","Items","catch","console","error","TempGraph","useState","historicData","setHistoricData","chartRef","setChartRef","tempData","map","x","timestamp","y","temp","useEffect","chart","Chart","type","datasets","borderWidth","borderColor","backgroundColor","label","options","maintainAspectRatio","scales","time","tooltipFormat","title","display","text","createChart","update","updateData","className","style","position","height","width","id","App","currentYear","Date","getFullYear","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAGaA,EAAe,uCAAG,sBAAAC,EAAA,+EAC7BC,MAHA,mEAIGC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SACpBC,OAAM,WAEL,OADAC,QAAQC,MAAM,uBACP,OANkB,2CAAH,qD,OCkDb,SAASC,IACtB,MAAwCC,mBAAc,IAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAWJ,EAAaK,KAAI,kBAAqC,CACrEC,EADgC,EAAGC,UAEnCC,EAFgC,EAAcC,SAsBhD,OAjBAC,qBAAU,WACRvB,IAAkBG,KAAKW,KACtB,IAEHS,qBAAU,WACR,IAAMC,EA9CU,SAACP,GACnB,OAAO,IAAIQ,IAAM,UAAW,CAC1BC,KAAM,OACNpB,KAAM,CACJqB,SAAU,CACR,CACErB,KAAMW,EACNW,YAAa,EACbC,YAAa,UACbC,gBAAiB,UACjBC,MAAO,UAIbC,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNf,EAAG,CACDO,KAAM,OACNS,KAAM,CACJC,cAAe,OAEjBC,MAAO,CACLC,SAAS,EACTC,KAAM,aAsBAC,CAAYvB,GAC1BD,EAAYQ,KAEX,IAEHD,qBAAU,WACHR,KAzDT,SAAoBS,EAAYP,GAC9BO,EAAMlB,KAAKqB,SAAS,GAAGrB,KAAOW,EAC9BO,EAAMiB,SAyDJC,CAAW3B,EAAUE,GACrBF,EAAS0B,YACR,CAAC1B,EAAUE,IAGZ,qBACE0B,UAAU,wDACVC,MAAO,CAAEC,SAAU,WAAYC,OAAQ,OAAQC,MAAO,QAFxD,SAIE,wBAAQC,GAAG,cC7DFC,MArBf,WACE,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OACE,sBAAKT,UAAU,2BAAf,UACE,wBAAQA,UAAU,0DAAlB,mCAGA,sBAAMA,UAAU,wBAAhB,SACE,cAAChC,EAAD,MAEF,yBAAQgC,UAAU,yEAAlB,qCAEE,mBAAGA,UAAU,sBAAsBU,KAAK,4BAAxC,kCAFF,WAKUH,SCHDI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4dd4ab2d.chunk.js","sourcesContent":["const API_URL =\n  \"https://8o8h5nqi81.execute-api.eu-west-2.amazonaws.com/tempData\";\n\nexport const getHistoricData = async () =>\n  fetch(API_URL)\n    .then((response) => response.json())\n    .then((data) => data.Items)\n    .catch(() => {\n      console.error(\"Couldn't fetch data\");\n      return [];\n    });\n","import { useEffect } from \"react\";\nimport \"chartjs-adapter-moment\";\n\nimport Chart from \"chart.js/auto\";\n\nimport { getHistoricData } from \"utils/backend\";\n\nimport { TempEntry } from \"utils/types\";\n\nimport { useState } from \"react\";\n\ninterface ChartData {\n  x: string;\n  y: number;\n}\n\nfunction updateData(chart: any, tempData: ChartData[]) {\n  chart.data.datasets[0].data = tempData;\n  chart.update();\n}\n\nconst createChart = (tempData: ChartData[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n    data: {\n      datasets: [\n        {\n          data: tempData,\n          borderWidth: 1,\n          borderColor: \"#AB2B00\",\n          backgroundColor: \"#D13400\",\n          label: \"Temp\",\n        },\n      ],\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          type: \"time\",\n          time: {\n            tooltipFormat: \"lll\",\n          },\n          title: {\n            display: true,\n            text: \"Date\",\n          },\n        },\n      },\n    },\n  });\n};\n\nexport default function TempGraph() {\n  const [historicData, setHistoricData] = useState<any>([]);\n  const [chartRef, setChartRef] = useState<any>();\n\n  const tempData = historicData.map(({ timestamp, temp }: TempEntry) => ({\n    x: timestamp,\n    y: temp,\n  }));\n\n  useEffect(() => {\n    getHistoricData().then(setHistoricData);\n  }, []);\n\n  useEffect(() => {\n    const chart = createChart(tempData);\n    setChartRef(chart);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef) return;\n\n    updateData(chartRef, tempData);\n    chartRef.update();\n  }, [chartRef, tempData]);\n\n  return (\n    <div\n      className=\"bg-white border-transparent rounded-lg shadow-xl p-10\"\n      style={{ position: \"relative\", height: \"60vh\", width: \"80vw\" }}\n    >\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import TempGraph from \"components/temp-graph/TempGraph\";\n\nfunction App() {\n  const currentYear = new Date().getFullYear();\n  return (\n    <div className=\"h-screen bg-gray-800 p-3\">\n      <header className=\"text-2xl font-bold text-white h-1/6 flex justify-center\">\n        Eco house - dashboard\n      </header>\n      <main className=\"mx-auto w-10/12 h-4/6\">\n        <TempGraph />\n      </main>\n      <footer className=\"h-1/6 flex items-center justify-center w-full h-24 border-t text-white\">\n        Created with ☕ &nbsp;\n        <a className=\"hover:text-gray-400\" href=\"https://www.jkrymarys.pl/\">\n          &nbsp;jkrymarys.pl&nbsp;\n        </a>\n        ©&nbsp;{currentYear}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}