{"version":3,"sources":["utils/backend.ts","components/temp-graph/TempGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["routes","getHistoricData","a","fetch","then","response","json","data","Items","catch","notification","open","message","TempGraph","useState","historicData","setHistoricData","chartRef","setChartRef","tempTimeseriesData","map","temp","labels","timestamp","useEffect","chart","Chart","type","datasets","borderWidth","borderColor","backgroundColor","label","createChart","update","updateData","className","id","Title","Typography","Text","Link","Header","Layout","Footer","Sider","Content","App","currentYear","Date","getFullYear","justify","span","CoffeeOutlined","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAIMA,EACK,kBAGEC,EAAe,uCAAG,sBAAAC,EAAA,+EAC7BC,MAAM,GAAD,OAPS,0DAOT,OAAcH,IAChBI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SACpBC,OAAM,WAIL,OAHAC,IAAaC,KAAK,CAChBC,QAAS,wBAEJ,OARkB,2CAAH,qD,gBC2Bb,SAASC,IACtB,MAAwCC,mBAAc,IAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAqBJ,EAAaK,KAAI,qBAAGC,QACzCC,EAASP,EAAaK,KAAI,qBAAGG,aAmBnC,OAjBAC,qBAAU,WACRvB,IAAkBG,KAAKY,KACtB,IAEHQ,qBAAU,WACR,IAAMC,EA9BU,SAAClB,EAAgBe,GACnC,OAAO,IAAII,IAAM,UAAW,CAC1BC,KAAM,OACNpB,KAAM,CACJe,OAAQA,EACRM,SAAU,CACR,CACErB,KAAMA,EACNsB,YAAa,EACbC,YAAa,UACbC,gBAAiB,UACjBC,MAAO,YAmBCC,CAAYd,EAAoBG,GAC9CJ,EAAYO,KAEX,IAEHD,qBAAU,WACHP,KA1CT,SAAoBQ,EAAYlB,EAAgBe,GAC9CG,EAAMlB,KAAKe,OAASA,EACpBG,EAAMlB,KAAKqB,SAAS,GAAGrB,KAAOA,EAC9BkB,EAAMS,SAyCJC,CAAWlB,EAAUE,EAAoBG,GACzCL,EAASiB,YACR,CAACjB,EAAUE,EAAoBG,IAGhC,qBAAKc,UAAU,aAAf,SACE,wBAAQC,GAAG,c,UCtDTC,EAAsBC,IAAtBD,MAAOE,EAAeD,IAAfC,KAAMC,EAASF,IAATE,KACbC,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,OAAQC,EAAmBF,IAAnBE,MAAOC,EAAYH,IAAZG,QA8BhBC,MA5Bf,WACE,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OACE,eAAC,IAAD,CAAQd,UAAU,cAAlB,UACE,cAACM,EAAD,CAAQN,UAAU,SAAlB,SACE,cAACE,EAAD,CAAOF,UAAU,aAAjB,qCAEF,eAAC,IAAD,WACE,cAACS,EAAD,CAAOT,UAAU,UACjB,cAACU,EAAD,UACE,cAAC,IAAD,CAAKK,QAAQ,SAAb,SACE,cAAC,IAAD,CAAKC,KAAM,GAAX,SACE,cAAC,EAAD,aAKR,cAACR,EAAD,CAAQR,UAAU,SAAlB,SACE,eAACI,EAAD,CAAMb,KAAK,YAAX,0BACe,cAAC0B,EAAA,EAAD,IADf,MAEE,cAACZ,EAAD,CAAMa,KAAK,4BAAX,4BAFF,OAGGN,WCjBIO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.114784bb.chunk.js","sourcesContent":["import { notification } from \"antd\";\n\nconst API_URL = \"https://8o8h5nqi81.execute-api.eu-west-2.amazonaws.com\";\n\nconst routes = {\n  allData: \"/getAllTempData\",\n};\n\nexport const getHistoricData = async () =>\n  fetch(`${API_URL}${routes.allData}`)\n    .then((response) => response.json())\n    .then((data) => data.Items)\n    .catch(() => {\n      notification.open({\n        message: \"Couldn't fetch data\",\n      });\n      return [];\n    });\n","import { useEffect } from \"react\";\n\nimport Chart from \"chart.js/auto\";\n\nimport { getHistoricData } from \"utils/backend\";\n\nimport { TempEntry } from \"utils/types\";\n\nimport \"./TempGraph.scss\";\nimport { useState } from \"react\";\n\nfunction updateData(chart: any, data: number[], labels: string[]) {\n  chart.data.labels = labels;\n  chart.data.datasets[0].data = data;\n  chart.update();\n}\n\nconst createChart = (data: number[], labels: string[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          borderWidth: 1,\n          borderColor: \"#AB2B00\",\n          backgroundColor: \"#D13400\",\n          label: \"Temp\",\n        },\n      ],\n    },\n  });\n};\n\nexport default function TempGraph() {\n  const [historicData, setHistoricData] = useState<any>([]);\n  const [chartRef, setChartRef] = useState<any>();\n\n  const tempTimeseriesData = historicData.map(({ temp }: TempEntry) => temp);\n  const labels = historicData.map(({ timestamp }: TempEntry) => timestamp);\n\n  useEffect(() => {\n    getHistoricData().then(setHistoricData);\n  }, []);\n\n  useEffect(() => {\n    const chart = createChart(tempTimeseriesData, labels);\n    setChartRef(chart);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef) return;\n\n    updateData(chartRef, tempTimeseriesData, labels);\n    chartRef.update();\n  }, [chartRef, tempTimeseriesData, labels]);\n\n  return (\n    <div className=\"temp-chart\">\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import { Typography, Layout, Row, Col } from \"antd\";\nimport { CoffeeOutlined } from \"@ant-design/icons\";\n\nimport TempGraph from \"components/temp-graph/TempGraph\";\n\nimport \"./App.scss\";\n\nconst { Title, Text, Link } = Typography;\nconst { Header, Footer, Sider, Content } = Layout;\n\nfunction App() {\n  const currentYear = new Date().getFullYear();\n  return (\n    <Layout className=\"main-layout\">\n      <Header className=\"header\">\n        <Title className=\"page-title\">Eco house - dashboard</Title>\n      </Header>\n      <Layout>\n        <Sider className=\"sider\"></Sider>\n        <Content>\n          <Row justify=\"center\">\n            <Col span={20}>\n              <TempGraph />\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n      <Footer className=\"footer\">\n        <Text type=\"secondary\">\n          Created with <CoffeeOutlined /> by\n          <Link href=\"https://www.jkrymarys.pl/\"> jkrymarys.pl </Link>Â©\n          {currentYear}\n        </Text>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}