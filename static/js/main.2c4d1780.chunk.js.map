{"version":3,"sources":["utils/backend.ts","components/temp-graph/TempGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["routes","getHistoricData","a","fetch","then","response","json","data","Items","catch","console","error","TempGraph","useState","historicData","setHistoricData","chartRef","setChartRef","tempTimeseriesData","map","temp","labels","timestamp","useEffect","chart","Chart","type","datasets","borderWidth","borderColor","backgroundColor","label","createChart","update","updateData","className","id","App","currentYear","Date","getFullYear","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEMA,EACK,kBAGEC,EAAe,uCAAG,sBAAAC,EAAA,+EAC7BC,MAAM,GAAD,OAPS,0DAOT,OAAcH,IAChBI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SACpBC,OAAM,WAEL,OADAC,QAAQC,MAAM,uBACP,OANkB,2CAAH,qD,OC4Bb,SAASC,IACtB,MAAwCC,mBAAc,IAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAqBJ,EAAaK,KAAI,qBAAGC,QACzCC,EAASP,EAAaK,KAAI,qBAAGG,aAmBnC,OAjBAC,qBAAU,WACRtB,IAAkBG,KAAKW,KACtB,IAEHQ,qBAAU,WACR,IAAMC,EA9BU,SAACjB,EAAgBc,GACnC,OAAO,IAAII,IAAM,UAAW,CAC1BC,KAAM,OACNnB,KAAM,CACJc,OAAQA,EACRM,SAAU,CACR,CACEpB,KAAMA,EACNqB,YAAa,EACbC,YAAa,UACbC,gBAAiB,UACjBC,MAAO,YAmBCC,CAAYd,EAAoBG,GAC9CJ,EAAYO,KAEX,IAEHD,qBAAU,WACHP,KA1CT,SAAoBQ,EAAYjB,EAAgBc,GAC9CG,EAAMjB,KAAKc,OAASA,EACpBG,EAAMjB,KAAKoB,SAAS,GAAGpB,KAAOA,EAC9BiB,EAAMS,SAyCJC,CAAWlB,EAAUE,EAAoBG,GACzCL,EAASiB,YACR,CAACjB,EAAUE,EAAoBG,IAGhC,qBAAKc,UAAU,wDAAf,SACE,wBAAQC,GAAG,cCrCFC,MArBf,WACE,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OACE,sBAAKL,UAAU,2BAAf,UACE,wBAAQA,UAAU,0DAAlB,mCAGA,sBAAMA,UAAU,wBAAhB,SACE,cAACvB,EAAD,MAEF,yBAAQuB,UAAU,yEAAlB,qCAEE,mBAAGA,UAAU,sBAAsBM,KAAK,4BAAxC,kCAFF,WAKUH,SCHDI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2c4d1780.chunk.js","sourcesContent":["const API_URL = \"https://8o8h5nqi81.execute-api.eu-west-2.amazonaws.com\";\n\nconst routes = {\n  allData: \"/getAllTempData\",\n};\n\nexport const getHistoricData = async () =>\n  fetch(`${API_URL}${routes.allData}`)\n    .then((response) => response.json())\n    .then((data) => data.Items)\n    .catch(() => {\n      console.error(\"Couldn't fetch data\");\n      return [];\n    });\n","import { useEffect } from \"react\";\n\nimport Chart from \"chart.js/auto\";\n\nimport { getHistoricData } from \"utils/backend\";\n\nimport { TempEntry } from \"utils/types\";\n\nimport { useState } from \"react\";\n\nfunction updateData(chart: any, data: number[], labels: string[]) {\n  chart.data.labels = labels;\n  chart.data.datasets[0].data = data;\n  chart.update();\n}\n\nconst createChart = (data: number[], labels: string[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          borderWidth: 1,\n          borderColor: \"#AB2B00\",\n          backgroundColor: \"#D13400\",\n          label: \"Temp\",\n        },\n      ],\n    },\n  });\n};\n\nexport default function TempGraph() {\n  const [historicData, setHistoricData] = useState<any>([]);\n  const [chartRef, setChartRef] = useState<any>();\n\n  const tempTimeseriesData = historicData.map(({ temp }: TempEntry) => temp);\n  const labels = historicData.map(({ timestamp }: TempEntry) => timestamp);\n\n  useEffect(() => {\n    getHistoricData().then(setHistoricData);\n  }, []);\n\n  useEffect(() => {\n    const chart = createChart(tempTimeseriesData, labels);\n    setChartRef(chart);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef) return;\n\n    updateData(chartRef, tempTimeseriesData, labels);\n    chartRef.update();\n  }, [chartRef, tempTimeseriesData, labels]);\n\n  return (\n    <div className=\"bg-white border-transparent rounded-lg shadow-xl p-10\">\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import TempGraph from \"components/temp-graph/TempGraph\";\n\nfunction App() {\n  const currentYear = new Date().getFullYear();\n  return (\n    <div className=\"h-screen bg-gray-800 p-3\">\n      <header className=\"text-2xl font-bold text-white h-1/6 flex justify-center\">\n        Eco house - dashboard\n      </header>\n      <main className=\"mx-auto w-10/12 h-4/6\">\n        <TempGraph />\n      </main>\n      <footer className=\"h-1/6 flex items-center justify-center w-full h-24 border-t text-white\">\n        Created with ☕ &nbsp;\n        <a className=\"hover:text-gray-400\" href=\"https://www.jkrymarys.pl/\">\n          &nbsp;jkrymarys.pl&nbsp;\n        </a>\n        ©&nbsp;{currentYear}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}