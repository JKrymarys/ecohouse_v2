{"version":3,"sources":["store/hooks.ts","store/houseTempSlice.ts","components/temp-graph/index.tsx","components/current-state/index.tsx","utils/backend.ts","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["useAppSelector","useSelector","DATA_STATUS","loaded","loading","error","houseTempSlice","createSlice","name","initialState","data","status","reducers","houseDataFetch","state","houseDataLoaded","action","payload","houseDataError","actions","TempGraph","houseTemp","useState","chartRef","setChartRef","tempData","map","x","timestamp","y","temp","useEffect","chart","Chart","type","datasets","borderWidth","borderColor","backgroundColor","label","options","maintainAspectRatio","scales","time","tooltipFormat","title","display","text","createChart","update","updateData","className","style","position","height","width","id","calculateMean","reduce","mean","dataEntry","length","today","Date","toISOString","slice","CurrentState","lastEntry","todayEntries","filter","e","includes","lastEntryDatetime","parse","toLocaleString","allTimeMean","todayMean","toFixed","getHistoricData","a","fetch","then","response","json","Items","sort","catch","console","App","currentYear","getFullYear","dispatch","useDispatch","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbf2aada.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './'\n\n// Use throughout the app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { HouseTempState } from './types';\nimport { TempEntry } from 'utils/types'\n\n\n\nconst DATA_STATUS = {\n    loaded: {\n        loaded: true,\n        loading: false,\n        error: false\n    },\n    loading: {\n        loaded: false,\n        loading: true,\n        error: false\n    },\n    error: {\n        loaded: false,\n        loading: false,\n        error: true\n    },\n}\n\nconst initialState: HouseTempState = {\n    data: [],\n    status: {\n        loaded: false,\n        loading: false,\n        error: false\n    }\n}\n\nexport const houseTempSlice = createSlice({\n    name: 'houseTemperature',\n    initialState,\n    reducers: {\n        houseDataFetch: (state) => {\n            state.status = DATA_STATUS.loading\n        },\n        houseDataLoaded: (state, action: PayloadAction<TempEntry[]>) => {\n            state.status = DATA_STATUS.loaded;\n            state.data = action.payload;\n        },\n        houseDataError: (state) => {\n            state.status = DATA_STATUS.error\n        },\n    },\n})\n\nexport const { houseDataFetch, houseDataLoaded, houseDataError } = houseTempSlice.actions;\n\nexport default houseTempSlice.reducer","import { useEffect, useState } from \"react\";\nimport { useAppSelector } from \"store/hooks\";\nimport Chart from \"chart.js/auto\";\nimport \"chartjs-adapter-moment\";\n\nimport { TempEntry } from \"utils/types\";\n\ninterface ChartData {\n  x: string;\n  y: number;\n}\n\nfunction updateData(chart: any, tempData: ChartData[]) {\n  chart.data.datasets[0].data = tempData;\n  chart.update();\n}\n\nconst createChart = (tempData: ChartData[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n    data: {\n      datasets: [\n        {\n          data: tempData,\n          borderWidth: 1,\n          borderColor: \"#AB2B00\",\n          backgroundColor: \"#D13400\",\n          label: \"Temp\",\n        },\n      ],\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          type: \"time\",\n          time: {\n            tooltipFormat: \"lll\",\n          },\n          title: {\n            display: true,\n            text: \"Date\",\n          },\n        },\n      },\n    },\n  });\n};\n\nexport default function TempGraph() {\n  const { data } = useAppSelector((state) => state.houseTemp);\n\n  const [chartRef, setChartRef] = useState<any>();\n\n  const tempData = data.map(({ timestamp, temp }: TempEntry) => ({\n    x: timestamp,\n    y: temp,\n  }));\n\n  useEffect(() => {\n    const chart = createChart(tempData);\n    setChartRef(chart);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef) return;\n\n    updateData(chartRef, tempData);\n    chartRef.update();\n  }, [chartRef, tempData]);\n\n  return (\n    <div\n      className=\"bg-white border-transparent rounded-lg shadow-xl p-10\"\n      style={{ position: \"relative\", height: \"60vh\", width: \"60vw\" }}\n    >\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import { useAppSelector } from \"store/hooks\";\nimport \"chartjs-adapter-moment\";\nimport { TempEntry } from \"utils/types\";\n\nfunction calculateMean(data: TempEntry[]) {\n  return (\n    data.reduce((mean: number, dataEntry: TempEntry) => {\n      mean += dataEntry.temp;\n      return mean;\n    }, 0) / data.length\n  );\n}\n\nconst today = new Date().toISOString().slice(0, 10);\n\nexport default function CurrentState() {\n  const { data } = useAppSelector((state) => state.houseTemp);\n\n  const lastEntry = data[data.length - 1];\n  const todayEntries = data.filter((e) => e.timestamp.includes(today));\n\n  const lastEntryDatetime = new Date(\n    Date.parse(lastEntry?.timestamp)\n  ).toLocaleString();\n\n  const allTimeMean = calculateMean(data);\n  const todayMean = calculateMean(todayEntries);\n\n  return (\n    <div className=\"bg-white border-transparent rounded-lg shadow-xl p-10 h-full flex flex-col justify-between\">\n      <div>\n        <h1 className=\"text-xl font-semibold mb-4\">Stats</h1>\n        Current: {lastEntry?.temp} °C\n        <br />\n        Today mean: {todayMean.toFixed(2)} °C <br />\n        All time mean: {allTimeMean.toFixed(2)} °C <br />\n      </div>\n      <p className=\"text-sm text-gray-400\">Last data: {lastEntryDatetime}</p>\n    </div>\n  );\n}\n","const API_URL =\n  \"https://8o8h5nqi81.execute-api.eu-west-2.amazonaws.com/tempData\";\n\nexport const getHistoricData = async () =>\n  fetch(API_URL)\n    .then((response) => response.json())\n    .then((data) => data.Items.sort())\n    .catch(() => {\n      console.error(\"Couldn't fetch data\");\n      return [];\n    });\n","import { useEffect } from \"react\";\n\nimport { useAppDispatch, useAppSelector } from \"store/hooks\";\nimport {\n  houseDataFetch,\n  houseDataLoaded,\n  houseDataError,\n} from \"./store/houseTempSlice\";\n\nimport TempGraph from \"components/temp-graph\";\nimport CurrentState from \"components/current-state\";\n\nimport { getHistoricData } from \"utils/backend\";\n\nfunction App() {\n  const currentYear = new Date().getFullYear();\n  const dispatch = useAppDispatch();\n  const { status } = useAppSelector((state) => state.houseTemp);\n\n  useEffect(() => {\n    dispatch(houseDataFetch());\n\n    getHistoricData()\n      .then((data) => dispatch(houseDataLoaded(data)))\n      .catch(() => dispatch(houseDataError()));\n  }, [dispatch]);\n\n  //TODO: improve loading and error handlers\n  if (status.loading) {\n    return <div>Loading....</div>;\n  }\n\n  if (status.error) {\n    return <div>Error!</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-800 p-3 flex flex-col justify-between\">\n      <header className=\"text-2xl font-bold text-white h-12 flex justify-center\">\n        Eco house - dashboard\n      </header>\n      <main className=\"flex flex-row flex-wrap p-6 justify-between items-stretch\">\n        <div className=\"p-6\">\n          <TempGraph />\n        </div>\n        <div className=\"p-6 flex-grow\">\n          <CurrentState />\n        </div>\n      </main>\n      <footer className=\"h-12 flex items-center justify-center w-full border-t text-white\">\n        Created with ☕ &nbsp;\n        <a className=\"hover:text-gray-400\" href=\"https://www.jkrymarys.pl/\">\n          &nbsp;jkrymarys.pl&nbsp;\n        </a>\n        ©&nbsp;{currentYear}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport houseTempSlice from './houseTempSlice'\n\nconst store = configureStore({\n    reducer: {\n        houseTemp: houseTempSlice\n    },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}