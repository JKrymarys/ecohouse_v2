{"version":3,"sources":["components/house-info/HistoricDataTable.tsx","utils/backend.ts","components/temp-graph/TempGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HouseInfo","className","routes","getHistoricData","a","fetch","then","response","json","catch","e","console","log","TempGraph","useState","historicData","setHistoricData","chartRef","setChartRef","tempTimeseriesData","map","temp","labels","dateTime","useEffect","chart","data","Chart","type","datasets","borderWidth","borderColor","backgroundColor","label","createChart","update","updateData","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAYe,SAASA,IAUtB,OACE,qBAAKC,UAAU,wB,yCCrBbC,EACK,kBAGEC,EAAe,uCAAG,sBAAAC,EAAA,+EAC7BC,MAAM,GAAD,OAPS,0DAOT,OAAcH,IAChBI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAACC,GAEN,OADAC,QAAQC,IAAI,QAASF,GACd,OALkB,2CAAH,qD,MC6Bb,SAASG,IAAa,IAAD,EACMC,mBAAc,IADpB,mBAC3BC,EAD2B,KACbC,EADa,OAEFF,qBAFE,mBAE3BG,EAF2B,KAEjBC,EAFiB,KAI5BC,EAAqBJ,EAAaK,KAAI,qBAAGC,QACzCC,EAASP,EAAaK,KAAI,qBAAGG,YAmBnC,OAjBAC,qBAAU,WACRrB,IAAkBG,KAAKU,KACtB,IAEHQ,qBAAU,WACR,IAAMC,EA9BU,SAACC,EAAgBJ,GACnC,OAAO,IAAIK,IAAM,UAAW,CAC1BC,KAAM,OACNF,KAAM,CACJJ,OAAQA,EACRO,SAAU,CACR,CACEH,KAAMA,EACNI,YAAa,EACbC,YAAa,UACbC,gBAAiB,UACjBC,MAAO,YAmBCC,CAAYf,EAAoBG,GAC9CJ,EAAYO,KAEX,IAEHD,qBAAU,WACHP,KA1CT,SAAoBQ,EAAYC,EAAgBJ,GAC9CG,EAAMC,KAAKJ,OAASA,EACpBG,EAAMC,KAAKG,SAAS,GAAGH,KAAOA,EAC9BD,EAAMU,SAyCJC,CAAWnB,EAAUE,EAAoBG,GACzCL,EAASkB,YACR,CAAClB,EAAUE,EAAoBG,IAGhC,qBAAKrB,UAAU,aAAf,SACE,wBAAQoC,GAAG,cC9CFC,MAVf,WACE,OACE,gCACE,8CACA,cAACtC,EAAD,IACA,cAAC,EAAD,QCISuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c56acb15.chunk.js","sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// import { getCurrentState } from \"utils/backend\";\n\n// // import \"./HouseInfo.scss\";\n\n// interface CurrentHouseState {\n//   datetime: string;\n//   pressure: number;\n//   temp: number;\n// }\n\nexport default function HouseInfo() {\n  // const [currentHouseState, setCurrentHouseState] = useState<CurrentHouseState>();\n\n  // useEffect(() => {\n  //     const interval = setInterval(() => {\n  //         getCurrentState().then(setCurrentHouseState)\n  //     }, 5000);\n  //     return () => clearInterval(interval);\n  // }, []);\n\n  return (\n    <div className=\"historic-data-table\">\n      {\n        // currentHouseState ?\n        //     (<>\n        //         <div className=\"info-row\">temp: {currentHouseState.temp} </div>\n        //         <div className=\"info-row\">pressure: {currentHouseState.pressure}</div>\n        //     </>\n        //     ) :\n        //     <div> No data </div>\n      }\n    </div>\n  );\n}\n","const API_URL = \"https://8o8h5nqi81.execute-api.eu-west-2.amazonaws.com\";\n\nconst routes = {\n  allData: \"/getAllTempData\",\n};\n\nexport const getHistoricData = async () =>\n  fetch(`${API_URL}${routes.allData}`)\n    .then((response) => response.json())\n    .catch((e) => {\n      console.log(\"Error\", e);\n      return [];\n    });\n","import { useEffect } from \"react\";\n\nimport Chart from \"chart.js/auto\";\n\nimport { getHistoricData } from \"utils/backend\";\n\nimport { TempEntry } from \"utils/types\";\n\nimport \"./TempGraph.scss\";\nimport { useState } from \"react\";\n\nfunction updateData(chart: any, data: number[], labels: string[]) {\n  chart.data.labels = labels;\n  chart.data.datasets[0].data = data;\n  chart.update();\n}\n\nconst createChart = (data: number[], labels: string[]) => {\n  return new Chart(\"myChart\", {\n    type: \"line\",\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          borderWidth: 1,\n          borderColor: \"#AB2B00\",\n          backgroundColor: \"#D13400\",\n          label: \"Temp\",\n        },\n      ],\n    },\n  });\n};\n\nexport default function TempGraph() {\n  const [historicData, setHistoricData] = useState<any>([]);\n  const [chartRef, setChartRef] = useState<any>();\n\n  const tempTimeseriesData = historicData.map(({ temp }: TempEntry) => temp);\n  const labels = historicData.map(({ dateTime }: TempEntry) => dateTime);\n\n  useEffect(() => {\n    getHistoricData().then(setHistoricData);\n  }, []);\n\n  useEffect(() => {\n    const chart = createChart(tempTimeseriesData, labels);\n    setChartRef(chart);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef) return;\n\n    updateData(chartRef, tempTimeseriesData, labels);\n    chartRef.update();\n  }, [chartRef, tempTimeseriesData, labels]);\n\n  return (\n    <div className=\"temp-chart\">\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n","import \"./App.scss\";\n\nimport HouseInfo from \"components/house-info/HistoricDataTable\";\nimport TempGraph from \"components/temp-graph/TempGraph\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Eco house v2</h1>\n      <HouseInfo />\n      <TempGraph />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}